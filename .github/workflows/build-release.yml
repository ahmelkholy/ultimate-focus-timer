name: 🚀 Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: UltimateFocusTimer-windows
            executable_ext: .exe
          - os: macos-latest
            artifact_name: UltimateFocusTimer-macos
            executable_ext: ''
          - os: ubuntu-latest
            artifact_name: UltimateFocusTimer-linux
            executable_ext: ''

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install System Dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk mpv

    - name: 📦 Install System Dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install mpv

    - name: 📦 Install System Dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        choco install mpv -y

    - name: 🔧 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=5.13.0

    - name: 🧪 Run Tests
      run: |
        python run_tests.py --unit --verbose
      continue-on-error: true

    - name: 🏗️ Build Executable
      run: |
        python build_config.py build

    - name: 📝 Create Build Info
      shell: bash
      run: |
        echo "# Build Information" > build_info.md
        echo "- **Platform**: ${{ matrix.os }}" >> build_info.md
        echo "- **Python Version**: ${{ env.PYTHON_VERSION }}" >> build_info.md
        echo "- **Build Date**: $(date)" >> build_info.md
        echo "- **Commit**: ${{ github.sha }}" >> build_info.md

        if [ -f "dist/UltimateFocusTimer${{ matrix.executable_ext }}" ]; then
          echo "- **Executable Size**: $(du -h dist/UltimateFocusTimer${{ matrix.executable_ext }} | cut -f1)" >> build_info.md
        fi

    - name: 📁 Prepare Artifacts
      shell: bash
      run: |
        mkdir -p artifacts

        # Copy executable
        if [ -f "dist/UltimateFocusTimer${{ matrix.executable_ext }}" ]; then
          cp "dist/UltimateFocusTimer${{ matrix.executable_ext }}" artifacts/
        fi

        # Copy additional files
        cp README.md artifacts/
        cp LICENSE artifacts/
        cp config.yml artifacts/
        cp build_info.md artifacts/

        # Copy docs and static files
        cp -r docs artifacts/ || true
        cp -r static artifacts/ || true
        cp -r files artifacts/ || true

        # Create installer script
        python build_config.py installer
        if [ -f "install.bat" ]; then
          cp install.bat artifacts/
        fi
        if [ -f "install.sh" ]; then
          cp install.sh artifacts/
        fi

    - name: 🗜️ Create Archive
      shell: bash
      run: |
        cd artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          7z a -tzip "../${{ matrix.artifact_name }}.zip" *
        else
          tar -czf "../${{ matrix.artifact_name }}.tar.gz" *
        fi

    - name: 📤 Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

  release:
    name: 🚀 Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4

    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: 📝 Generate Release Notes
      id: release_notes
      run: |
        echo "# 🎯 Ultimate Focus Timer Release" > release_notes.md
        echo "" >> release_notes.md
        echo "## What's New" >> release_notes.md
        echo "- Cross-platform executable builds" >> release_notes.md
        echo "- Improved performance and stability" >> release_notes.md
        echo "- Enhanced user interface" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Downloads" >> release_notes.md
        echo "Choose the appropriate version for your operating system:" >> release_notes.md
        echo "" >> release_notes.md
        echo "- **Windows**: UltimateFocusTimer-windows.zip" >> release_notes.md
        echo "- **macOS**: UltimateFocusTimer-macos.tar.gz" >> release_notes.md
        echo "- **Linux**: UltimateFocusTimer-linux.tar.gz" >> release_notes.md
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "1. Download the appropriate package for your system" >> release_notes.md
        echo "2. Extract the archive" >> release_notes.md
        echo "3. Run the installer script or executable directly" >> release_notes.md
        echo "" >> release_notes.md
        echo "## System Requirements" >> release_notes.md
        echo "- Python 3.8+ (for source version)" >> release_notes.md
        echo "- MPV Media Player (auto-installed by setup)" >> release_notes.md
        echo "" >> release_notes.md
        echo "Built with ❤️ for productivity enthusiasts worldwide!" >> release_notes.md

    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Ultimate Focus Timer ${{ github.ref_name }}
        body_path: release_notes.md
        files: |
          artifacts/UltimateFocusTimer-windows/UltimateFocusTimer-windows.zip
          artifacts/UltimateFocusTimer-macos/UltimateFocusTimer-macos.tar.gz
          artifacts/UltimateFocusTimer-linux/UltimateFocusTimer-linux.tar.gz
        draft: false
        prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-executables:
    name: 🧪 Test Executables
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            artifact_name: UltimateFocusTimer-windows
          - os: macos-latest
            artifact_name: UltimateFocusTimer-macos
          - os: ubuntu-latest
            artifact_name: UltimateFocusTimer-linux

    steps:
    - name: 📥 Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: ${{ matrix.artifact_name }}

    - name: 🧪 Test Executable
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          unzip ${{ matrix.artifact_name }}.zip
          ./UltimateFocusTimer.exe --info || echo "Executable test completed"
        else
          tar -xzf ${{ matrix.artifact_name }}.tar.gz
          chmod +x UltimateFocusTimer
          ./UltimateFocusTimer --info || echo "Executable test completed"
        fi
